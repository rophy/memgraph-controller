# Values for memgraph-ha chart - Memgraph HA with controller
# All memgraph values are predefined for HA deployment

memgraph:
  image:
    repository: memgraph/memgraph
    tag: ""  # Uses chart appVersion
    pullPolicy: IfNotPresent

  replicaCount: 3

  # Configure for HA deployment
  service:
    enableBolt: true
    boltPort: 7687
    enableWebsocketMonitoring: false
    enableHttpMonitoring: false

  # Persistent storage configuration
  persistentVolumeClaim:
    createStorageClaim: true
    storageClassName: ""  # Use cluster default
    storageSize: 10Gi
    createLogStorage: true
    logStorageSize: 1Gi

  # Memgraph configuration for replication
  memgraphConfig:
  - "--data-directory=/var/lib/memgraph/mg_data"
  - "--log-level=INFO"
  - "--also-log-to-stderr=true"
  - "--replication-restore-state-on-startup=true"
  - "--storage-snapshot-on-exit=false"

  # Resource configuration
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

  # Service account
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  # Container probes
  container:
    terminationGracePeriodSeconds: 1800
    readinessProbe:
      exec:
        command: ["/bin/sh", "-c", "echo 'RETURN 0;' | timeout 10s mgconsole --output-format csv --username=memgraph >/dev/null 2>&1"]
      failureThreshold: 3
      timeoutSeconds: 10
      periodSeconds: 30
    livenessProbe:
      exec:
        command: ["/bin/sh", "-c", "echo 'RETURN 0;' | timeout 10s mgconsole --output-format csv --username=memgraph >/dev/null 2>&1"]
      failureThreshold: 20
      timeoutSeconds: 10
      periodSeconds: 30
    startupProbe:
      tcpSocket:
        port: 7687
      failureThreshold: 1440
      periodSeconds: 5

  # Lifecycle hooks for graceful shutdown
  lifecycleHooks:
    preStop:
      exec:
        command:
          - /bin/sh
          - -c
          - |
            # Call controller preStop hook API to clear gateway upstreams
            # This prevents new connections to this terminating pod
            echo "PreStop: Calling controller prestop-hook API using Python..."
            python3 -c "
            import urllib.request
            import urllib.error
            import json
            import time

            def call_prestop_api():
                try:
                    url = 'http://memgraph-controller:8080/api/v1/admin/prestop-hook'
                    request = urllib.request.Request(url, method='POST')
                    request.add_header('Content-Type', 'application/json')

                    # Set timeout and attempt the request
                    with urllib.request.urlopen(request, timeout=10) as response:
                        result = response.read().decode('utf-8')
                        print('PreStop: API response:', result)
                        return True
                except urllib.error.URLError as e:
                    print('PreStop: API call failed:', str(e))
                    return False
                except Exception as e:
                    print('PreStop: Unexpected error:', str(e))
                    return False

            # Try up to 2 times with delay
            for attempt in range(2):
                if call_prestop_api():
                    break
                if attempt < 1:
                    time.sleep(1)
                    print('PreStop: Retrying API call...')

            print('PreStop: PreStop hook API call completed')
            " || true
            # Give gateway time to process upstream clearing
            sleep 2

  # Init container for system configuration
  sysctlInitContainer:
    enabled: true
    maxMapCount: 262144
    image:
      repository: library/busybox
      tag: latest
      pullPolicy: IfNotPresent

# Controller configuration
controller:
  # Image configuration
  image:
    repository: memgraph-controller
    tag: latest
    pullPolicy: IfNotPresent
  
  # Deployment configuration
  replicaCount: 2
  
  # Namespace configuration
  namespace: memgraph
  
  # Service account
  serviceAccount:
    create: true
    name: memgraph-controller
    annotations: {}
  
  # Service configuration
  service:
    type: ClusterIP
    httpPort: 8080
    boltPort: 7687
  
  # Environment variables
  env:
    appName: memgraph
    reconcileInterval: "30s"
    boltPort: "7687"
    httpPort: "8080"
    statefulsetName: memgraph-ha
    
    # Gateway configuration
    gateway:
      enabled: true
      bindAddress: "0.0.0.0:7687"
      maxConnections: 1000
      timeout: "30s"
      bufferSize: 32768
      healthCheckInterval: "30s"
      connectionTimeout: "10s"
      idleTimeout: "5m"
      maxBytesPerConnection: 1073741824
      cleanupInterval: "1m"
      tls:
        enabled: false
        certPath: "/etc/certs/tls.crt"
        keyPath: "/etc/certs/tls.key"
      rateLimit:
        enabled: true
        rps: 100
        burst: 200
        window: "1m"

    # Read Gateway configuration (disabled by default)
    enableReadGateway: false

    # Admin API configuration (for preStop hooks and debugging)
    enableAdminAPI: true

    logging:
      level: "debug"
      addSource: false
      format: "text"
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
  
  # Resource configuration
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Probes configuration
  livenessProbe:
    httpGet:
      path: /livez
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /readyz
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Labels and annotations
  labels:
    app: memgraph-controller
    component: controller
  
  annotations: {}
