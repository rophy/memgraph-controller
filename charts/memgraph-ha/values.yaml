# Values for memgraph-ha chart - Memgraph HA with controller
# All memgraph values are predefined for HA deployment

memgraph:
  image:
    repository: memgraph/memgraph
    tag: 3.6.1
    pullPolicy: IfNotPresent

  replicaCount: 3

  # Configure for HA deployment
  service:
    enableBolt: true
    boltPort: 7687
    enableWebsocketMonitoring: false
    enableHttpMonitoring: false

  # Persistent storage configuration
  persistentVolumeClaim:
    createStorageClaim: true
    storageClassName: ""  # Use cluster default
    storageSize: 10Gi
    createLogStorage: true
    logStorageSize: 1Gi

  # Memgraph configuration for replication
  memgraphConfig:
  - "--data-directory=/var/lib/memgraph/mg_data"
  - "--log-level=INFO"
  - "--also-log-to-stderr=true"
  - "--replication-restore-state-on-startup=true"
  - "--storage-snapshot-on-exit=false"

  # Resource configuration
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

  # Service account
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  extraEnv:
  - name: POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: POD_ID
    valueFrom:
      fieldRef:
        fieldPath: metadata.uid
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: PRESTOP_TIMEOUT_SECONDS
    value: '600'

  # Container probes
  container:
    terminationGracePeriodSeconds: 1800
    readinessProbe:
      exec:
        command: ["/bin/sh", "-c", "echo 'RETURN 0;' | timeout 10s mgconsole --username=\"${MEMGRAPH_USER:-memgraph}\" --password=\"${MEMGRAPH_PASSWORD:-}\" >/dev/null 2>&1"]
      failureThreshold: 3
      timeoutSeconds: 10
      periodSeconds: 30
    livenessProbe:
      exec:
        command: ["/bin/sh", "-c", "echo 'RETURN 0;' | timeout 10s mgconsole --username=\"${MEMGRAPH_USER:-memgraph}\" --password=\"${MEMGRAPH_PASSWORD:-}\" >/dev/null 2>&1"]
      failureThreshold: 20
      timeoutSeconds: 10
      periodSeconds: 30
    startupProbe:
      tcpSocket:
        port: 7687
      failureThreshold: 1440
      periodSeconds: 5

  # Lifecycle hooks for graceful shutdown
  lifecycleHooks:
    preStop:
      exec:
        command:
          - /bin/sh
          - -c
          - |
            # Call controller preStop hook API
            # Which will try to wait for the cluster to be in a stable state
            python3 -u -c "
            import os
            import requests
            import sys
            import time
            from datetime import datetime

            # Setup logging
            pod_name = os.getenv('POD_NAME', 'unknown')
            pod_id = os.getenv('POD_ID', 'unknown')
            pod_ip = os.getenv('POD_IP', 'unknown')
            timeout = int(os.getenv('PRESTOP_TIMEOUT_SECONDS', '600'))
            username = os.getenv('MEMGRAPH_USER', 'memgraph')
            password = os.getenv('MEMGRAPH_PASSWORD', '')
            url = f'http://memgraph-controller:8080/prestop-hook/{pod_name}'
            log_file = f'/var/log/memgraph/prestop-{pod_name}_{pod_id}_{pod_ip}.log'

            try:
              f = open(log_file, 'a')
            except Exception as e:
              timestamp = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ')
              print(f'[{timestamp}] ERROR: Failed to open log file: {e}', file=sys.stderr)
              f = None


            def log(msg):
              timestamp = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ')
              try:
                f.write(f'[{timestamp}] {msg}\n')
                f.flush()
              except Exception as e:
                # If logging fails, write to stderr
                print(f'[{timestamp}] LOG ERROR: {e}', file=sys.stderr)
                print(f'[{timestamp}] {msg}', file=sys.stderr)


            log('START PreStop hook')
            log(f'Pod: {pod_name}, ID: {pod_id}, IP: {pod_ip}')
            log(f'Configuration: timeout={timeout}s, url={url}')
            for attempt in range(1, 4):
              log(f'Attempt {attempt}/3: Calling {url}')
              call_completed = False
              try:
                resp = requests.post(url, timeout=timeout, auth=(username, password))
                call_completed = True
                log(f'Attempt {attempt}/3: status={resp.status_code}')
                if resp.status_code == 200:
                  log('END PreStop hook (exit=0)')
                  sys.exit(0)
                else:
                  log('END PreStop hook (exit=1)')
                  sys.exit(1)
              except requests.exceptions.Timeout:
                call_completed = True
                log(f'Attempt {attempt}/3: TIMEOUT after {timeout}s')
                log('END PreStop hook (exit=1)')
                sys.exit(1)
              except Exception as e:
                call_completed = True
                log(f'Attempt {attempt}/3: ERROR ({type(e).__name__}: {e})')
                time.sleep(3)
                continue
              finally:
                if call_completed:
                  log(f'Attempt {attempt}/3: finally block - call completed normally')
                else:
                  log(f'Attempt {attempt}/3: finally block - INTERRUPTED, request never completed')
            log('END PreStop hook (exit=1, all attempts exhausted)')
            sys.exit(1)
            "

  # Init container for system configuration
  sysctlInitContainer:
    enabled: true
    maxMapCount: 262144
    image:
      repository: library/busybox
      tag: latest
      pullPolicy: IfNotPresent

  # Init container for data cleanup
  # Handles hard reset for diverged async replicas (priority 1)
  # Cleans WAL files for replicas on restart (priority 2)
  # See design/replica_hard_reset.md for details
  initContainers:
    - name: data-cleanup
      image: library/busybox
      imagePullPolicy: IfNotPresent
      command: ['/bin/sh', '-c']
      args:
        - |
          echo "========================================="
          echo "Memgraph Data Cleanup Init Container"
          echo "========================================="
          echo "Pod: $(hostname)"
          echo "Timestamp: $(date)"

          MARKER_FILE="/var/lib/memgraph/.hard-reset-requested"
          REPLICATION_META="/var/lib/memgraph/mg_data/replication"
          WAL_DIR="/var/lib/memgraph/mg_data/wal"

          # === HARD RESET CHECK ===
          if [ -f "$MARKER_FILE" ]; then
            echo ""
            echo "üî• HARD RESET REQUESTED - Magic marker file detected"
            echo "Reading marker file:"
            cat "$MARKER_FILE" || echo "Failed to read marker file"

            echo ""
            echo "üóëÔ∏è  Performing FULL data cleanup..."

            # Remove all Memgraph data directories
            rm -rf /var/lib/memgraph/mg_data/* || true

            # Remove marker file to prevent repeated cleanup
            rm -f "$MARKER_FILE"

            echo "‚úÖ Hard reset complete - pod will start with clean slate"
            echo "========================================="
            exit 0
          fi

          echo "========================================="
          echo "Init container finished"
          echo "========================================="
      volumeMounts:
        - name: memgraph-ha-lib-storage
          mountPath: /var/lib/memgraph
      securityContext:
        runAsUser: 101   # memgraph user
        runAsGroup: 103  # memgraph group

# Controller configuration
controller:
  # Image configuration
  image:
    repository: memgraph-controller
    tag: latest
    pullPolicy: IfNotPresent
  
  # Deployment configuration
  replicaCount: 2
  
  # Namespace configuration
  namespace: memgraph
  
  # Service account
  serviceAccount:
    create: true
    name: memgraph-controller
    annotations: {}
  
  # Service configuration
  service:
    type: ClusterIP
    httpPort: 8080
    boltPort: 7687
  
  # Environment variables
  env:
    appName: memgraph
    reconcileInterval: "30s"
    preStopTimeoutSeconds: "600"
    boltPort: "7687"
    httpPort: "8080"
    statefulsetName: memgraph-ha
    
    # Gateway configuration
    gateway:
      enabled: true
      bindAddress: "0.0.0.0:7687"
      maxConnections: 1000
      timeout: "30s"
      bufferSize: 32768
      healthCheckInterval: "30s"
      connectionTimeout: "10s"
      idleTimeout: "5m"
      maxBytesPerConnection: 1073741824
      cleanupInterval: "1m"
      tls:
        enabled: false
        certPath: "/etc/certs/tls.crt"
        keyPath: "/etc/certs/tls.key"
      rateLimit:
        enabled: true
        rps: 100
        burst: 200
        window: "1m"

    # Read Gateway configuration (disabled by default)
    enableReadGateway: false

    # Admin API configuration (for preStop hooks and debugging)
    enableAdminAPI: true

    logging:
      level: "debug"
      addSource: false
      format: "text"
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
  
  # Resource configuration
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Probes configuration
  livenessProbe:
    httpGet:
      path: /livez
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /readyz
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Labels and annotations
  labels:
    app: memgraph-controller
    component: controller
  
  annotations: {}
